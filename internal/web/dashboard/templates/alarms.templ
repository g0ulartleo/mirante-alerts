package templates

import (
	"fmt"
	"math"
	"strings"

	"github.com/g0ulartleo/mirante-alerts/internal/alarm"
)

templ Alarms(alarmsWithSignals []alarm.AlarmSignals) {
	@Base(WebSocketContainer(alarmsWithSignals))
}

templ WebSocketContainer(alarmsWithSignals []alarm.AlarmSignals) {
		<div id="alarms-container">
			@Treemap(alarmsWithSignals, 0, "/")
		</div>
}

templ Treemap(alarmsWithSignals []alarm.AlarmSignals, level int, baseURL string) {
	<div class="h-screen p-2">
		{{ groups := make(map[string][]alarm.AlarmSignals) }}
		{{ thisLevelConfigs := []alarm.AlarmSignals{} }}

		for _, alarmWithSignal := range alarmsWithSignals {
			if strings.Join(alarmWithSignal.Alarm.Path, "/") == strings.TrimLeft(baseURL, "/") {
				{{ thisLevelConfigs = append(thisLevelConfigs, alarmWithSignal) }}
			} else if len(alarmWithSignal.Alarm.Path) > level {
				{{ groupKey := alarmWithSignal.Alarm.Path[level] }}
				{{ groups[groupKey] = append(groups[groupKey], alarmWithSignal) }}
			}
		}

		{{ totalItems := len(thisLevelConfigs) + len(groups) }}
		{{ cols := int(math.Sqrt(float64(totalItems))) }}
		{{ if cols * cols < totalItems { cols += 1 } }}
		{{ gridTemplateColumns := fmt.Sprintf("grid-cols-[repeat(%d,minmax(0,1fr))]", cols) }}

		{{ lastRowItems := totalItems % cols }}
		{{ spanNeeded := 1 }}
		{{ if lastRowItems > 0 && lastRowItems < cols {
			spanNeeded = cols - lastRowItems + 1
		} }}

		<div class={ "grid gap-2 h-[calc(100vh-1rem)] " + gridTemplateColumns }>
			{{ itemsRendered := 0 }}
			for groupKey, groupConfigs := range groups {
				{{ itemClass := "w-full h-full flex items-center justify-center rounded-sm text-center p-2 " + getGroupStatus(groupConfigs) }}
				{{ itemsRendered++ }}
				{{ isLastItem := itemsRendered == totalItems }}

				{{ if isLastItem && lastRowItems > 0 && lastRowItems < cols {
					itemClass += fmt.Sprintf(" col-span-%d", spanNeeded)
				} }}

				<a href={getGroupURL(baseURL, groupKey)} class={ itemClass }>
					<span class="text-xl text-white font-semibold">{ groupKey }</span>
				</a>
			}

			for _, alarmWithSignal := range thisLevelConfigs {
				{{ itemClass := "w-full h-full flex items-center justify-center rounded-sm text-center p-2 " + getAlarmStatusColor(alarmWithSignal) }}
				{{ itemsRendered++ }}
				{{ isLastItem := itemsRendered == totalItems }}

				{{ if isLastItem && lastRowItems > 0 && lastRowItems < cols {
					itemClass += fmt.Sprintf(" col-span-%d", spanNeeded)
				} }}

				<div class={ itemClass }>
					<div class="flex flex-col gap-2">
						<span class="text-xl text-white">{ alarmWithSignal.Alarm.Name }</span>
						if len(alarmWithSignal.Signals) > 0 {
							<p class="text-sm text-white">{ alarmWithSignal.Signals[len(alarmWithSignal.Signals)-1].Message }</p>
						}
					</div>
				</div>
			}
		</div>
	</div>
}

func getGroupStatus(alarmsWithSignals []alarm.AlarmSignals) string {
	hasUnhealthy := false
	allHealthy := true

	for _, alarmWithSignal := range alarmsWithSignals {
		if len(alarmWithSignal.Signals) > 0 {
			lastStatus := alarmWithSignal.Signals[len(alarmWithSignal.Signals)-1].Status
			if lastStatus == "unhealthy" {
				hasUnhealthy = true
				break
			} else if lastStatus != "healthy" {
				allHealthy = false
			}
		} else {
			allHealthy = false
		}
	}

	switch {
	case hasUnhealthy:
		return "bg-red-500 hover:bg-red-600"
	case allHealthy:
		return "bg-green-500 hover:bg-green-600"
	default:
		return "bg-gray-500 hover:bg-gray-600"
	}
}

func getAlarmStatusColor(alarmSignals alarm.AlarmSignals) string {
	if len(alarmSignals.Signals) == 0 {
		return "bg-gray-500"
	}
	lastStatus := alarmSignals.Signals[len(alarmSignals.Signals)-1].Status
	if lastStatus == "healthy" {
		return "bg-green-500"
	}
    if lastStatus == "unknown" {
        return "bg-gray-500"
    }
	return "bg-red-500"
}

func getGroupURL(baseURL string, groupKey string) templ.SafeURL {
	if baseURL == "/" {
		return templ.SafeURL(fmt.Sprintf("%s", groupKey))
	}
	return templ.SafeURL(fmt.Sprintf("%s/%s", baseURL, groupKey))
}

func getParentURL(currentURL string) templ.SafeURL {
	if currentURL == "/" {
		return templ.SafeURL(currentURL)
	}
	lastSlash := strings.LastIndex(currentURL, "/")
	if lastSlash <= len("/") {
		return templ.SafeURL("/")
	}
	return templ.SafeURL(currentURL[:lastSlash])
}
