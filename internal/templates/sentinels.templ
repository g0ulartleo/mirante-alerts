package templates

import (
	"fmt"
	"strings"

	"github.com/g0ulartleo/mirante-alerts/internal/sentinel"
)

templ Sentinels(sentinelConfigs []sentinel.SentinelConfigData) {
	@Treemap(sentinelConfigs, 0, "/")
}

templ Treemap(configs []sentinel.SentinelConfigData, level int, baseURL string) {
	<div class="h-screen p-2">
		<div class="grid grid-cols-[repeat(auto-fit,minmax(200px,1fr))] auto-rows-fr gap-2 h-[calc(100vh-1rem)]">
			{{ groups := make(map[string][]sentinel.SentinelConfigData) }}
			{{ thisLevelConfigs := []sentinel.SentinelConfigData{} }}

			for _, config := range configs {
				if strings.Join(config.Config.Path, "/") == strings.TrimLeft(baseURL, "/") {
					{{ thisLevelConfigs = append(thisLevelConfigs, config) }}
				} else if len(config.Config.Path) > level {
					{{ groupKey := config.Config.Path[level] }}
					{{ groups[groupKey] = append(groups[groupKey], config) }}
				}
			}

			for groupKey, groupConfigs := range groups {
				{{ statusClass := getGroupStatus(groupConfigs) }}
				{{ groupURL := getGroupURL(baseURL, groupKey) }}
				<a href={groupURL} class={ "w-full h-full flex items-center justify-center rounded-sm text-center p-2 " + statusClass }>
					<span class="text-xl text-white font-semibold">{ groupKey }</span>
				</a>
			}

			for _, config := range thisLevelConfigs {
				{{ configStatusColor := getConfigStatusColor(config) }}
				<div class={ "w-full h-full flex items-center justify-center rounded-sm text-center p-2 " + configStatusColor }>
					<div class="flex flex-col gap-2">
						<span class="text-xl text-white">{ config.Config.Name }</span>
						if len(config.Signals) > 0 {
							<p class="text-sm text-white">{ config.Signals[len(config.Signals)-1].Message }</p>
							if config.Signals[len(config.Signals)-1].Status == "unhealthy" {
								<p class="text-sm text-white">{ fmt.Sprintf("%v", config.Signals[len(config.Signals)-1].Metadata) }</p>
							}
						}
					</div>
				</div>
			}
		</div>
	</div>
}

func getGroupStatus(configs []sentinel.SentinelConfigData) string {
	hasUnhealthy := false
	allHealthy := true

	for _, config := range configs {
		if len(config.Signals) > 0 {
			lastStatus := config.Signals[len(config.Signals)-1].Status
			if lastStatus == "unhealthy" {
				hasUnhealthy = true
				break
			} else if lastStatus != "healthy" {
				allHealthy = false
			}
		} else {
			allHealthy = false
		}
	}

	switch {
	case hasUnhealthy:
		return "bg-red-500 hover:bg-red-600"
	case allHealthy:
		return "bg-green-500 hover:bg-green-600"
	default:
		return "bg-gray-500 hover:bg-gray-600"
	}
}

func getConfigStatusColor(config sentinel.SentinelConfigData) string {
	if len(config.Signals) == 0 {
		return "bg-gray-500"
	}
	lastStatus := config.Signals[len(config.Signals)-1].Status
	if lastStatus == "healthy" {
		return "bg-green-500"
	}
	return "bg-red-500"
}

func getGroupURL(baseURL string, groupKey string) templ.SafeURL {
	if baseURL == "/" {
		return templ.SafeURL(fmt.Sprintf("%s", groupKey))
	}
	return templ.SafeURL(fmt.Sprintf("%s/%s", baseURL, groupKey))
}

func getParentURL(currentURL string) templ.SafeURL {
	if currentURL == "/" {
		return templ.SafeURL(currentURL)
	}
	lastSlash := strings.LastIndex(currentURL, "/")
	if lastSlash <= len("/") {
		return templ.SafeURL("/")
	}
	return templ.SafeURL(currentURL[:lastSlash])
}
